networks:
  monitoring:
    driver: bridge

volumes:
  db_data:
    driver: local
  prometheus_data: { }
  loki_data: { }
  grafana_data: { }

services:
  api:
    image: api:latest
    build:
      context: .
      dockerfile: Api/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - database
      - cache
    environment:
      # Connection strings
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING:-Server=database;Port=5432;Database=dev_db;User Id=dev_user;Password=dev_password;}
      - ConnectionStrings__Redis=${CACHE_CONNECTION_STRING:-cache:6379}
      
      # OpenTelemetry configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=api
      - OTEL_SERVICE_VERSION=1.0.0
      
      # ASP.NET Core settings
      - ASPNETCORE_URLS=http://+:80
      
      # Jwt settings
      - JwtSettings__Secret=${JWT_SECRET:-SUPER_SECRET_AND_SECURE_AND_VERY_LONG_KEY_USED_FOR_ENCRYPTION}
      - JwtSettings__Issuer=${JWT_ISSUER:-Api}
      - JwtSettings__Audience=${JWT_AUDIENCE:-ApiUsers}
      
      # Cors settings
      - Cors__AllowedOrigins=${CORS_ALLOWED_ORIGINS:-http://localhost:80}
      - Cors__PolicyName=${CORS_POLICY_NAME:-DefaultCorsPolicy}
      
      # Hangfire settings
      - HangfireSettings__Url=${HANGFIRE_URL:-http://background_service:8080}
      
      # SMTP settings
      - SmtpSettings__Host=${SMTP_HOST:-mailhog}
      - SmtpSettings__Port=${SMTP_PORT:-1025}
      - SmtpSettings__Username=${SMTP_USERNAME:-}
      - SmtpSettings__Password=${SMTP_PASSWORD:-}
      - SmtpSettings__From=${SMTP_FROM:-noreply@api.local}
      - SmtpSettings__UseSsl=${SMTP_USE_SSL:-false}
    restart: unless-stopped
    networks:
      - monitoring
  
  background_service:
    image: background_service:latest
    build:
      context: .
      dockerfile: WorkerService/Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - database
      - cache
    environment:
      # Connection strings
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING:-Server=database;Port=5432;Database=dev_db;User Id=dev_user;Password=dev_password;}
      - ConnectionStrings__Redis=${CACHE_CONNECTION_STRING:-cache:6379}
      
      # SMTP settings
      - SmtpSettings__Host=${SMTP_HOST:-mailhog}
      - SmtpSettings__Port=${SMTP_PORT:-1025}
      - SmtpSettings__Username=${SMTP_USERNAME:-}
      - SmtpSettings__Password=${SMTP_PASSWORD:-}
      - SmtpSettings__From=${SMTP_FROM:-noreply@api.local}
      - SmtpSettings__UseSsl=${SMTP_USE_SSL:-false}
    restart: unless-stopped
    networks:
      - monitoring
  
  database:
    image: postgres:18.0-alpine3.22
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dev_db}
      POSTGRES_USER: ${POSTGRES_USER:-dev_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - monitoring

  cache:
    image: valkey/valkey:8.1.4-alpine3.22
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - monitoring

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.107.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    depends_on:
      - jaeger
      - loki
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:1.58
    ports:
      - "16686:16686" # Jaeger UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.53.1
    command: [ "--config.file=/etc/prometheus.yml", "--web.enable-lifecycle" ]
    volumes:
      - ./config/prometheus.yml:/etc/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring

  loki:
    image: grafana/loki:3.1.0
    command: [ "-config.file=/etc/loki/config.yaml" ]
    volumes:
      - ./config/loki-config.yaml:/etc/loki/config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:11.1.2
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - jaeger
    restart: unless-stopped
    networks:
      - monitoring
  
  # Development services  
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: unless-stopped
    networks:
      - monitoring